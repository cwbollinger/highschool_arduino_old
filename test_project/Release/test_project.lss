
test_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  00000232  2**0
                  ALLOC
  2 .debug_aranges 00000090  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000cd  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005c2  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000271  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005e0  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bd  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000016d  00000000  00000000  00001421  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8a:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup>:

//The setup function is called once at startup of the sketch
void setup()
{
// Add your initialization code here
}
  92:	08 95       	ret

00000094 <loop>:

// The loop function is called in an endless loop
void loop()
{
//Add your repeated code here
}
  94:	08 95       	ret

00000096 <main>:
#include <Arduino.h>

int main(void)
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
{
	init();
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
  9e:	0e 94 49 00 	call	0x92	; 0x92 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  a6:	0e 94 4a 00 	call	0x94	; 0x94 <loop>
		if (serialEventRun) serialEventRun();
  aa:	20 97       	sbiw	r28, 0x00	; 0
  ac:	e1 f3       	breq	.-8      	; 0xa6 <main+0x10>
  ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x10>

000000b4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  ca:	80 91 64 00 	lds	r24, 0x0064
  ce:	90 91 65 00 	lds	r25, 0x0065
  d2:	a0 91 66 00 	lds	r26, 0x0066
  d6:	b0 91 67 00 	lds	r27, 0x0067
	unsigned char f = timer0_fract;
  da:	30 91 68 00 	lds	r19, 0x0068

	m += MILLIS_INC;
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	a1 1d       	adc	r26, r1
  e2:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
  e4:	23 2f       	mov	r18, r19
  e6:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
  e8:	2d 37       	cpi	r18, 0x7D	; 125
  ea:	20 f0       	brcs	.+8      	; 0xf4 <__vector_16+0x40>
		f -= FRACT_MAX;
  ec:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
  f4:	20 93 68 00 	sts	0x0068, r18
	timer0_millis = m;
  f8:	80 93 64 00 	sts	0x0064, r24
  fc:	90 93 65 00 	sts	0x0065, r25
 100:	a0 93 66 00 	sts	0x0066, r26
 104:	b0 93 67 00 	sts	0x0067, r27
	timer0_overflow_count++;
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	90 91 61 00 	lds	r25, 0x0061
 110:	a0 91 62 00 	lds	r26, 0x0062
 114:	b0 91 63 00 	lds	r27, 0x0063
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	80 93 60 00 	sts	0x0060, r24
 122:	90 93 61 00 	sts	0x0061, r25
 126:	a0 93 62 00 	sts	0x0062, r26
 12a:	b0 93 63 00 	sts	0x0063, r27
}
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 144:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 146:	84 b5       	in	r24, 0x24	; 36
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 152:	85 b5       	in	r24, 0x25	; 37
 154:	82 60       	ori	r24, 0x02	; 2
 156:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 15e:	ee e6       	ldi	r30, 0x6E	; 110
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 168:	e1 e8       	ldi	r30, 0x81	; 129
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 17a:	e0 e8       	ldi	r30, 0x80	; 128
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	81 60       	ori	r24, 0x01	; 1
 182:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 184:	e1 eb       	ldi	r30, 0xB1	; 177
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 18e:	e0 eb       	ldi	r30, 0xB0	; 176
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 1a8:	80 81       	ld	r24, Z
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1ae:	80 81       	ld	r24, Z
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1b4:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
